// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  resetTokens ResetToken[]
  orders     Order[]

  @@map("users")
}

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reset_tokens")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin") // admin, super_admin
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  originalPrice Float?
  category    String
  brand       String
  image       String
  images      String   // JSON string of image URLs
  inStock     Boolean  @default(true)
  stock       Int      @default(0)
  rating      Float    @default(0)
  reviews     Int      @default(0)
  features    String   // JSON string of features
  specifications Json? // JSON object for specifications
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  discount    Int?     // Discount percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model Order {
  id          String   @id @default(cuid())
  userId      String
  status      String   @default("pending") // pending, confirmed, shipped, delivered, cancelled
  totalAmount Float
  shippingAddress Json // JSON object for shipping address
  paymentMethod String
  paymentStatus String @default("pending") // pending, paid, failed, refunded
  trackingNumber String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}
